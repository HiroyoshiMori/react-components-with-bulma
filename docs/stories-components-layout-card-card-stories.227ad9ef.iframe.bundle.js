"use strict";(globalThis.webpackChunk_hiroyoshi_mori_react_components_bulma=globalThis.webpackChunk_hiroyoshi_mori_react_components_bulma||[]).push([[458],{"./node_modules/@fortawesome/free-solid-svg-icons/faAngleDown.js":(__unused_webpack_module,exports)=>{exports.DF={prefix:"fas",iconName:"angle-down",icon:[448,512,[8964],"f107","M201.4 342.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 274.7 86.6 137.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z"]},exports.gc=exports.DF},"./src/stories/components/layout/card/card.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,IsActiveInFooter:()=>IsActiveInFooter,WithAttributes:()=>WithAttributes,WithDatasets:()=>WithDatasets,__namedExportsOrder:()=>__namedExportsOrder,default:()=>card_stories});var faAngleDown=__webpack_require__("./node_modules/@fortawesome/free-solid-svg-icons/faAngleDown.js"),react=__webpack_require__("./node_modules/react/index.js"),utils=__webpack_require__("./src/utils/index.ts"),components_element=__webpack_require__("./src/components/element/index.ts"),common=__webpack_require__("./src/components/common.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");let CardHeader=props=>{var _classes$wrap,_classes$title,_classes$button;let{title,buttonIcon}=props,attributes=(0,common.j)(props.attributes,["wrap","title","button","span"],{}),{datasets,datasetShown}=(0,common.G)(props.datasets,["wrap","title","button","span"],new Map),classes=(0,common.j)(props.classes,["wrap","title","button","span"],[],k=>{let defaultValue;switch(k){case"wrap":defaultValue="card-header";break;case"title":defaultValue="card-header-title";break;case"button":defaultValue="card-header-icon";break;case"span":defaultValue="icon"}return defaultValue});return(0,jsx_runtime.jsx)(react.Fragment,{children:(0,jsx_runtime.jsxs)("header",{className:(_classes$wrap=classes.wrap)===null||void 0===_classes$wrap?void 0:_classes$wrap.join(" "),...attributes.wrap,...datasetShown.wrap,children:[title&&(0,jsx_runtime.jsx)("p",{className:(_classes$title=classes.title)===null||void 0===_classes$title?void 0:_classes$title.join(" "),...attributes.title,...datasetShown.title,children:title}),buttonIcon&&(0,jsx_runtime.jsx)("button",{className:(_classes$button=classes.button)===null||void 0===_classes$button?void 0:_classes$button.join(" "),...attributes.button,...datasetShown.button,children:(0,jsx_runtime.jsx)(components_element.PJ,{icon:buttonIcon,classes:classes.span,attributes:attributes.span,datasets:datasets.span})})]})})};CardHeader.__docgenInfo={description:"",methods:[],displayName:"CardHeader",props:{title:{required:!0,tsType:{name:"ReactNode"},description:""},buttonIcon:{required:!1,tsType:{name:"FontAwesomeIconProps"},description:""},onClick:{required:!1,tsType:{name:"signature",type:"function",raw:"(e: React.MouseEvent<HTMLButtonElement>) => void",signature:{arguments:[{type:{name:"ReactMouseEvent",raw:"React.MouseEvent<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},name:"e"}],return:{name:"void"}}},description:""},classes:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    wrap?: string[];\n    title?: string[];\n    button?: string[];\n    span?: string[];\n}",signature:{properties:[{key:"wrap",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"title",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"button",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"span",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}}]}},description:""},attributes:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    wrap?: HTMLAttributes<HTMLDivElement>;\n    title?: HTMLAttributes<HTMLParagraphElement>;\n    button?: ButtonHTMLAttributes<HTMLButtonElement>;\n    span?: HTMLAttributes<HTMLSpanElement>;\n}",signature:{properties:[{key:"wrap",value:{name:"HTMLAttributes",elements:[{name:"HTMLDivElement"}],raw:"HTMLAttributes<HTMLDivElement>",required:!1}},{key:"title",value:{name:"HTMLAttributes",elements:[{name:"HTMLParagraphElement"}],raw:"HTMLAttributes<HTMLParagraphElement>",required:!1}},{key:"button",value:{name:"ButtonHTMLAttributes",elements:[{name:"HTMLButtonElement"}],raw:"ButtonHTMLAttributes<HTMLButtonElement>",required:!1}},{key:"span",value:{name:"HTMLAttributes",elements:[{name:"HTMLSpanElement"}],raw:"HTMLAttributes<HTMLSpanElement>",required:!1}}]}},description:""},datasets:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    wrap?: CommonDataSet;\n    title?: CommonDataSet;\n    button?: CommonDataSet;\n    span?: CommonDataSet;\n}",signature:{properties:[{key:"wrap",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}},{key:"title",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}},{key:"button",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}},{key:"span",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}}]}},description:""}}};let CardImage=props=>{var _classes$wrap;let{src,alt}=props,attributes=(0,common.j)(props.attributes,["wrap","figure","image"],{}),{datasets,datasetShown}=(0,common.G)(props.datasets,["wrap","figure","image"],new Map),classes=(0,common.j)(props.classes,["wrap","figure","image"],[],k=>{let defaultValue;switch(k){case"wrap":defaultValue="card-image";break;case"figure":defaultValue="image"}return defaultValue});return(0,jsx_runtime.jsx)(react.Fragment,{children:(0,jsx_runtime.jsx)("div",{className:(_classes$wrap=classes.wrap)===null||void 0===_classes$wrap?void 0:_classes$wrap.join(" "),...attributes.wrap,...datasetShown.wrap,children:(0,jsx_runtime.jsx)(components_element.Ee,{src:src,alt:alt,classes:{wrap:classes.figure,image:classes.image},attributes:{wrap:attributes.figure,image:attributes.image},datasets:{wrap:datasets.figure,image:datasets.image}})})})};CardImage.__docgenInfo={description:"",methods:[],displayName:"CardImage",props:{src:{required:!0,tsType:{name:"string"},description:""},alt:{required:!1,tsType:{name:"string"},description:""},classes:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    wrap?: string[];\n    figure?: string[];\n    image?: string[];\n}",signature:{properties:[{key:"wrap",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"figure",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"image",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}}]}},description:""},attributes:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    wrap?: HTMLAttributes<HTMLDivElement>;\n    figure?: HTMLAttributes<HTMLElement>;\n    image?: HTMLAttributes<HTMLImageElement>;\n}",signature:{properties:[{key:"wrap",value:{name:"HTMLAttributes",elements:[{name:"HTMLDivElement"}],raw:"HTMLAttributes<HTMLDivElement>",required:!1}},{key:"figure",value:{name:"HTMLAttributes",elements:[{name:"HTMLElement"}],raw:"HTMLAttributes<HTMLElement>",required:!1}},{key:"image",value:{name:"HTMLAttributes",elements:[{name:"HTMLImageElement"}],raw:"HTMLAttributes<HTMLImageElement>",required:!1}}]}},description:""},datasets:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    wrap?: CommonDataSet;\n    figure?: CommonDataSet;\n    image?: CommonDataSet;\n}",signature:{properties:[{key:"wrap",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}},{key:"figure",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}},{key:"image",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}}]}},description:""}}};let CardContent=props=>{var _classes$wrap,_classes$content;let{children}=props,attributes=(0,common.j)(props.attributes,["wrap","content"],{}),{datasetShown}=(0,common.G)(props.datasets,["wrap","content"],new Map),classes=(0,common.j)(props.classes,["wrap","content"],[],k=>{let defaultValue;switch(k){case"wrap":defaultValue="card-content";break;case"content":defaultValue="content"}return defaultValue});return(0,jsx_runtime.jsx)(react.Fragment,{children:(0,jsx_runtime.jsx)("div",{className:(_classes$wrap=classes.wrap)===null||void 0===_classes$wrap?void 0:_classes$wrap.join(" "),...attributes.wrap,...datasetShown.wrap,children:(0,jsx_runtime.jsx)("div",{className:(_classes$content=classes.content)===null||void 0===_classes$content?void 0:_classes$content.join(" "),...attributes.content,...datasetShown.content,children:children})})})};CardContent.__docgenInfo={description:"",methods:[],displayName:"CardContent",props:{children:{required:!1,tsType:{name:"ReactNode"},description:""},classes:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    wrap?: string[];\n    content?: string[];\n}",signature:{properties:[{key:"wrap",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"content",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}}]}},description:""},attributes:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    wrap?: HTMLAttributes<HTMLDivElement>;\n    content?: HTMLAttributes<HTMLDivElement>;\n}",signature:{properties:[{key:"wrap",value:{name:"HTMLAttributes",elements:[{name:"HTMLDivElement"}],raw:"HTMLAttributes<HTMLDivElement>",required:!1}},{key:"content",value:{name:"HTMLAttributes",elements:[{name:"HTMLDivElement"}],raw:"HTMLAttributes<HTMLDivElement>",required:!1}}]}},description:""},datasets:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    wrap?: CommonDataSet;\n    content?: CommonDataSet;\n}",signature:{properties:[{key:"wrap",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}},{key:"content",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}}]}},description:""}}};let CardFooter=props=>{let{items=[],classes=[],attributes={},datasets=new Map}=props;classes.includes("card-footer")||classes.push("card-footer");let datasetShown=(0,utils.vM)(datasets),addClassToNode=(node,classes)=>{if(null===node)return console.debug("node satisfies null | undefined"),node;if("object"!=typeof node)return console.debug("node satisfies string | number | boolean"),(0,jsx_runtime.jsx)(react.Fragment,{children:(0,jsx_runtime.jsx)("span",{className:classes.join(" "),children:node})});if("props"in node){var _node$props;console.debug("node satisfies ReactElement | ReactPortal");let existing=null==node?void 0:(_node$props=node.props)===null||void 0===_node$props?void 0:_node$props.className,className=existing&&"string"==typeof existing?`${existing} ${classes.join(" ")}`:classes.join(" ");return react.cloneElement(node,{className:className})}return"then"in node?(console.debug("node satisfies PromiseLikeOfReactNode"),node.then(n=>addClassToNode(n,classes))):(console.debug("node satisfies ReactFragment"),(0,jsx_runtime.jsx)("div",{className:classes.join(" "),children:node}))};return(0,jsx_runtime.jsx)(react.Fragment,{children:(0,jsx_runtime.jsx)("div",{className:classes.join(" "),...attributes,...datasetShown,children:items&&items.length>0&&items.map((item,idx)=>{let cloneItem=addClassToNode(item,["card-footer-item"]);return(0,jsx_runtime.jsx)(react.Fragment,{children:cloneItem},"card-footer-item_"+idx)})})})};CardFooter.__docgenInfo={description:"",methods:[],displayName:"CardFooter",props:{items:{required:!0,tsType:{name:"Array",elements:[{name:"ReactNode"}],raw:"ReactNode[]"},description:""},attributes:{required:!1,tsType:{name:"HTMLAttributes",elements:[{name:"HTMLDivElement"}],raw:"HTMLAttributes<HTMLDivElement>"},description:""},datasets:{required:!1,tsType:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>"},description:""},classes:{required:!1,tsType:{name:"Array",elements:[{name:"string"}],raw:"string[]"},description:""}}};let Card=props=>{let{header,image,content,footer,classes=[],attributes={},datasets=new Map}=props;classes.includes("card")||classes.push("card");let datasetShown=(0,utils.vM)(datasets);return(0,jsx_runtime.jsx)(react.Fragment,{children:(0,jsx_runtime.jsxs)("div",{className:classes.join(" "),...attributes,...datasetShown,children:[header&&(0,jsx_runtime.jsx)(CardHeader,{...header}),image&&(0,jsx_runtime.jsx)(CardImage,{...image}),content&&(0,jsx_runtime.jsx)(CardContent,{...content}),footer&&(0,jsx_runtime.jsx)(CardFooter,{...footer})]})})};Card.__docgenInfo={description:"",methods:[],displayName:"Card",props:{header:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    title: ReactNode;\n    buttonIcon?: FontAwesomeIconProps;\n    onClick?: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    classes?: CardHeaderClasses;\n    attributes?: CardHeaderAttributes;\n    datasets?: CardHeaderDatasets;\n}",signature:{properties:[{key:"title",value:{name:"ReactNode",required:!0}},{key:"buttonIcon",value:{name:"FontAwesomeIconProps",required:!1}},{key:"onClick",value:{name:"signature",type:"function",raw:"(e: React.MouseEvent<HTMLButtonElement>) => void",signature:{arguments:[{type:{name:"ReactMouseEvent",raw:"React.MouseEvent<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},name:"e"}],return:{name:"void"}},required:!1}},{key:"classes",value:{name:"signature",type:"object",raw:"{\n    wrap?: string[];\n    title?: string[];\n    button?: string[];\n    span?: string[];\n}",signature:{properties:[{key:"wrap",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"title",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"button",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"span",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}}]},required:!1}},{key:"attributes",value:{name:"signature",type:"object",raw:"{\n    wrap?: HTMLAttributes<HTMLDivElement>;\n    title?: HTMLAttributes<HTMLParagraphElement>;\n    button?: ButtonHTMLAttributes<HTMLButtonElement>;\n    span?: HTMLAttributes<HTMLSpanElement>;\n}",signature:{properties:[{key:"wrap",value:{name:"HTMLAttributes",elements:[{name:"HTMLDivElement"}],raw:"HTMLAttributes<HTMLDivElement>",required:!1}},{key:"title",value:{name:"HTMLAttributes",elements:[{name:"HTMLParagraphElement"}],raw:"HTMLAttributes<HTMLParagraphElement>",required:!1}},{key:"button",value:{name:"ButtonHTMLAttributes",elements:[{name:"HTMLButtonElement"}],raw:"ButtonHTMLAttributes<HTMLButtonElement>",required:!1}},{key:"span",value:{name:"HTMLAttributes",elements:[{name:"HTMLSpanElement"}],raw:"HTMLAttributes<HTMLSpanElement>",required:!1}}]},required:!1}},{key:"datasets",value:{name:"signature",type:"object",raw:"{\n    wrap?: CommonDataSet;\n    title?: CommonDataSet;\n    button?: CommonDataSet;\n    span?: CommonDataSet;\n}",signature:{properties:[{key:"wrap",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}},{key:"title",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}},{key:"button",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}},{key:"span",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}}]},required:!1}}]}},description:""},image:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    src: string;\n    alt?: string;\n    classes?: CardImageClasses;\n    attributes?: CardImageAttributes;\n    datasets?: CardImageDatasets;\n}",signature:{properties:[{key:"src",value:{name:"string",required:!0}},{key:"alt",value:{name:"string",required:!1}},{key:"classes",value:{name:"signature",type:"object",raw:"{\n    wrap?: string[];\n    figure?: string[];\n    image?: string[];\n}",signature:{properties:[{key:"wrap",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"figure",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"image",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}}]},required:!1}},{key:"attributes",value:{name:"signature",type:"object",raw:"{\n    wrap?: HTMLAttributes<HTMLDivElement>;\n    figure?: HTMLAttributes<HTMLElement>;\n    image?: HTMLAttributes<HTMLImageElement>;\n}",signature:{properties:[{key:"wrap",value:{name:"HTMLAttributes",elements:[{name:"HTMLDivElement"}],raw:"HTMLAttributes<HTMLDivElement>",required:!1}},{key:"figure",value:{name:"HTMLAttributes",elements:[{name:"HTMLElement"}],raw:"HTMLAttributes<HTMLElement>",required:!1}},{key:"image",value:{name:"HTMLAttributes",elements:[{name:"HTMLImageElement"}],raw:"HTMLAttributes<HTMLImageElement>",required:!1}}]},required:!1}},{key:"datasets",value:{name:"signature",type:"object",raw:"{\n    wrap?: CommonDataSet;\n    figure?: CommonDataSet;\n    image?: CommonDataSet;\n}",signature:{properties:[{key:"wrap",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}},{key:"figure",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}},{key:"image",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}}]},required:!1}}]}},description:""},content:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    children?: ReactNode;\n    classes?: CardContentClasses;\n    attributes?: CardContentAttributes;\n    datasets?: CardContentDatasets;\n}",signature:{properties:[{key:"children",value:{name:"ReactNode",required:!1}},{key:"classes",value:{name:"signature",type:"object",raw:"{\n    wrap?: string[];\n    content?: string[];\n}",signature:{properties:[{key:"wrap",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"content",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}}]},required:!1}},{key:"attributes",value:{name:"signature",type:"object",raw:"{\n    wrap?: HTMLAttributes<HTMLDivElement>;\n    content?: HTMLAttributes<HTMLDivElement>;\n}",signature:{properties:[{key:"wrap",value:{name:"HTMLAttributes",elements:[{name:"HTMLDivElement"}],raw:"HTMLAttributes<HTMLDivElement>",required:!1}},{key:"content",value:{name:"HTMLAttributes",elements:[{name:"HTMLDivElement"}],raw:"HTMLAttributes<HTMLDivElement>",required:!1}}]},required:!1}},{key:"datasets",value:{name:"signature",type:"object",raw:"{\n    wrap?: CommonDataSet;\n    content?: CommonDataSet;\n}",signature:{properties:[{key:"wrap",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}},{key:"content",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}}]},required:!1}}]}},description:""},footer:{required:!1,tsType:{name:"intersection",raw:"{\n    items: ReactNode[],\n    attributes?: HTMLAttributes<HTMLDivElement>;\n    datasets?: CommonDataSet;\n} & CommonStyleClasses",elements:[{name:"signature",type:"object",raw:"{\n    items: ReactNode[],\n    attributes?: HTMLAttributes<HTMLDivElement>;\n    datasets?: CommonDataSet;\n}",signature:{properties:[{key:"items",value:{name:"Array",elements:[{name:"ReactNode"}],raw:"ReactNode[]",required:!0}},{key:"attributes",value:{name:"HTMLAttributes",elements:[{name:"HTMLDivElement"}],raw:"HTMLAttributes<HTMLDivElement>",required:!1}},{key:"datasets",value:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>",required:!1}}]}},{name:"signature",type:"object",raw:"{\n    classes?: string[];\n}",signature:{properties:[{key:"classes",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}}]}}]},description:""},attributes:{required:!1,tsType:{name:"HTMLAttributes",elements:[{name:"HTMLDivElement"}],raw:"HTMLAttributes<HTMLDivElement>"},description:""},datasets:{required:!1,tsType:{name:"Map",elements:[{name:"string"},{name:"any"}],raw:"Map<string, any>"},description:""},classes:{required:!1,tsType:{name:"Array",elements:[{name:"string"}],raw:"string[]"},description:""}}};let card_stories={title:"React Component/Layout/Card",component:Card,tags:["autodocs"],parameters:{componentSubtitle:"All-around flexible and composable Card box",docs:{description:{component:"This component renders composable card box.<br />In Bulma doc: https://bulma.io/documentation/components/card/"}}},argTypes:{header:{control:"object",description:"Card header information",table:{type:{summary:"CardHeaderProps",detail:(0,utils.e6)(`
                            {
                                title: ReactNode,
                                buttonIcon?: FontAwesomeIconProps,
                                onClick: (e: React.MouseEvent<HTMLButtonElement>) => void,
                                classes?: {
                                    wrap?: string[], title?: string[], button?: string[],
                                    span?: string[], icon?: string[],
                                },
                                attributes: {
                                    wrap?: HTMLAttributes<HTMLDivElement>,
                                    title?: HTMLAttributes<HTMLParagraphElement>,
                                    button?: ButtonHTMLAttributes<HTMLButtonElement>,
                                    span?: HTMLAttributes<HTMLSpanElement>,
                                    icon?: HTMLAttributes<HTMLElement>,
                                },
                                datasets: {
                                    wrap?: Map<string, string>,
                                    title?: Map<string, string>,
                                    button?: Map<string, string>,
                                    span?: Map<string, string>,
                                    icon?: Map<string, string>,
                                },
                            }
                        `)},defaultValue:{summary:"undefined"}}},image:{control:"object",description:"Card image information",table:{type:{summary:"CardImageProps",detail:(0,utils.e6)(`
                            {
                                src: string,
                                alt?: string,
                                classes?: {
                                    wrap?: string[],
                                    figure?: string[],
                                    image?: string[],
                                },
                                attributes?: {
                                    wrap?: HTMLAttributes<HTMLDivElement>,
                                    figure?: HTMLAttributes<HTMLElement>,
                                    image?: HTMLAttributes<HTMLImageElement>,
                                },
                                datasets?: {
                                    wrap?: Map<string, string>,
                                    figure?: Map<string, string>,
                                    image?: Map<string, string>,
                                },
                            }
                        `)},defaultValue:{summary:"undefined"}}},content:{control:"object",description:"Card content information",table:{type:{summary:"CardContentProps",detail:(0,utils.e6)(`
                            {
                                children?: ReactNode,
                                classes?: {
                                    wrap?: string[],
                                    content?: string[],
                                },
                                attributes?: {
                                    wrap?: HTMLAttributes<HTMLDivElement>,
                                    content?: HTMLAttributes<HTMLDivElement>,
                                },
                                datasets?: {
                                    wrap?: Map<string, string>,
                                    content?: Map<string, string>,
                                }
                            }
                        `)},defaultValue:{summary:"undefined"}}},footer:{control:"object",description:"Card footer information",table:{type:{summary:"CardFooterProps",detail:(0,utils.e6)(`
                            {
                                items: ReactNode[],
                                classes?: string[],
                                attributes?: {
                                    wrap?: HTMLAttributes<HTMLDivElement>,
                                    content?: HTMLAttributes<HTMLDivElement>,
                                },
                                datasets?: {
                                    wrap?: Map<string, string>,
                                    content?: Map<string, string>,
                                },
                            }
                        `)},defaultValue:{summary:"undefined"}}},classes:{control:"object",description:"Style classes for card box",table:{type:{summary:"string[]"},defaultValue:{summary:"[]"}}},attributes:{control:"object",description:"Additional attributes for card box",table:{type:{summary:"HTMLAttributes<HTMLDivElement>",detail:(0,utils.e6)(`
                            e.g., {'aria-label': 'LABEL'}
                        `)},defaultValue:{summary:"{}"}}},datasets:{control:"object",description:'Datasets for card box. "data-" will be added at the beginning of attributes.',table:{type:{summary:"Map<string, string>",detail:(0,utils.e6)(`
                            e.g.,
                            new Map([
                                ['id', 'DATA_ID'],
                                ['name', 'DATA NAME'],
                            ])
                            → data-id="DATA_ID" data-name="DATA NAME"
                        `)},defaultValue:{summary:"new Map()"}}}}},Default={render:args=>(0,jsx_runtime.jsx)(Card,{header:{title:"Card Header",buttonIcon:{icon:faAngleDown.gc}},content:{children:"Card Content"},footer:{items:["Card Footer Item 1","Card Footer Item 2","Card Footer Item 3","Card Footer Item 4"]},...args})},IsActiveInFooter={...Default,args:{footer:{items:["Card Footer Item 1",(0,jsx_runtime.jsx)("a",{href:"#",className:"is-active",children:"Card Footer Item 2 w/class"}),"Card Footer Item 3","Card Footer Item 4"]}}},WithAttributes={...Default,args:{header:{title:"Card Header",buttonIcon:{icon:faAngleDown.gc},classes:{wrap:["card-header-wrap"],title:["card-header-title"],button:["card-header-button"],span:["card-header-span"]},attributes:{wrap:{"aria-label":"card-header-wrap"},title:{"aria-label":"card-header-title"},button:{"aria-label":"card-header-button"},span:{"aria-label":"card-header-span"}}},content:{children:"Card Content",classes:{wrap:["card-content-wrap"],content:["card-content-content"]},attributes:{wrap:{"aria-label":"card-content-wrap"},content:{"aria-label":"card-content-content"}}},footer:{items:["Card Footer Item 1","Card Footer Item 2","Card Footer Item 3","Card Footer Item 4"],classes:["card-footer1"],attributes:{"aria-label":"card-footer"}}}},WithDatasets={...Default,args:{datasets:new Map([["id","card"],["name","Card"]]),header:{title:"Card Header",buttonIcon:{icon:faAngleDown.gc},datasets:{wrap:new Map([["id","card-header-wrap"],["name","Card Header Wrap"]]),title:new Map([["id","card-header-title"],["name","Card Header Title"]]),button:new Map([["id","card-header-button"],["name","Card Header Button"]]),span:new Map([["id","card-header-span"],["name","Card Header Span"]]),icon:new Map([["id","card-header-icon"],["name","Card Header Icon"]])}},content:{children:"Card Content",datasets:{wrap:new Map([["id","card-content-wrap"],["name","Card Content Wrap"]]),content:new Map([["id","card-content-content"],["name","Card Content Content"]])}},footer:{items:["Card Footer Item 1","Card Footer Item 2","Card Footer Item 3","Card Footer Item 4"],datasets:new Map([["id","card-footer"],["name","Card Footer"]])}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: (args: any) => <Card header={{\n    title: "Card Header",\n    buttonIcon: {\n      icon: icon({\n        name: \'angle-down\',\n        style: \'solid\'\n      })\n    }\n  }} content={{\n    children: "Card Content"\n  }} footer={{\n    items: ["Card Footer Item 1", "Card Footer Item 2", "Card Footer Item 3", "Card Footer Item 4"]\n  }} {...args} />\n}',...Default.parameters?.docs?.source},description:{story:"Default card box",...Default.parameters?.docs?.description}}},IsActiveInFooter.parameters={...IsActiveInFooter.parameters,docs:{...IsActiveInFooter.parameters?.docs,source:{originalSource:'{\n  ...Default,\n  args: {\n    footer: {\n      items: ["Card Footer Item 1", <a href="#" className="is-active">Card Footer Item 2 w/class</a>, "Card Footer Item 3", "Card Footer Item 4"]\n    }\n  }\n}',...IsActiveInFooter.parameters?.docs?.source},description:{story:"Card box with is-active in footer",...IsActiveInFooter.parameters?.docs?.description}}},WithAttributes.parameters={...WithAttributes.parameters,docs:{...WithAttributes.parameters?.docs,source:{originalSource:"{\n  ...Default,\n  args: {\n    header: {\n      title: \"Card Header\",\n      buttonIcon: {\n        icon: icon({\n          name: 'angle-down',\n          style: 'solid'\n        })\n      },\n      classes: {\n        wrap: ['card-header-wrap'],\n        title: ['card-header-title'],\n        button: ['card-header-button'],\n        span: ['card-header-span']\n      },\n      attributes: {\n        wrap: {\n          'aria-label': 'card-header-wrap'\n        },\n        title: {\n          'aria-label': 'card-header-title'\n        },\n        button: {\n          'aria-label': 'card-header-button'\n        },\n        span: {\n          'aria-label': 'card-header-span'\n        }\n      }\n    },\n    content: {\n      children: \"Card Content\",\n      classes: {\n        wrap: ['card-content-wrap'],\n        content: ['card-content-content']\n      },\n      attributes: {\n        wrap: {\n          'aria-label': 'card-content-wrap'\n        },\n        content: {\n          'aria-label': 'card-content-content'\n        }\n      }\n    },\n    footer: {\n      items: [\"Card Footer Item 1\", \"Card Footer Item 2\", \"Card Footer Item 3\", \"Card Footer Item 4\"],\n      classes: ['card-footer1'],\n      attributes: {\n        'aria-label': 'card-footer'\n      }\n    }\n  }\n}",...WithAttributes.parameters?.docs?.source},description:{story:"Card box with additional attributes",...WithAttributes.parameters?.docs?.description}}},WithDatasets.parameters={...WithDatasets.parameters,docs:{...WithDatasets.parameters?.docs,source:{originalSource:"{\n  ...Default,\n  args: {\n    datasets: new Map([['id', 'card'], ['name', 'Card']]),\n    header: {\n      title: \"Card Header\",\n      buttonIcon: {\n        icon: icon({\n          name: 'angle-down',\n          style: 'solid'\n        })\n      },\n      datasets: {\n        wrap: new Map([['id', 'card-header-wrap'], ['name', 'Card Header Wrap']]),\n        title: new Map([['id', 'card-header-title'], ['name', 'Card Header Title']]),\n        button: new Map([['id', 'card-header-button'], ['name', 'Card Header Button']]),\n        span: new Map([['id', 'card-header-span'], ['name', 'Card Header Span']]),\n        icon: new Map([['id', 'card-header-icon'], ['name', 'Card Header Icon']])\n      }\n    },\n    content: {\n      children: \"Card Content\",\n      datasets: {\n        wrap: new Map([['id', 'card-content-wrap'], ['name', 'Card Content Wrap']]),\n        content: new Map([['id', 'card-content-content'], ['name', 'Card Content Content']])\n      }\n    },\n    footer: {\n      items: [\"Card Footer Item 1\", \"Card Footer Item 2\", \"Card Footer Item 3\", \"Card Footer Item 4\"],\n      datasets: new Map([['id', 'card-footer'], ['name', 'Card Footer']])\n    }\n  }\n}",...WithDatasets.parameters?.docs?.source},description:{story:"Card box with datasets",...WithDatasets.parameters?.docs?.description}}};let __namedExportsOrder=["Default","IsActiveInFooter","WithAttributes","WithDatasets"]}}]);
//# sourceMappingURL=stories-components-layout-card-card-stories.227ad9ef.iframe.bundle.js.map